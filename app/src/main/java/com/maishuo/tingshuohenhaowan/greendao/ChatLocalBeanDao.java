package com.maishuo.tingshuohenhaowan.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.maishuo.tingshuohenhaowan.greendaomanager.ChatLocalBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LOCAL_BEAN".
*/
public class ChatLocalBeanDao extends AbstractDao<ChatLocalBean, Long> {

    public static final String TABLENAME = "CHAT_LOCAL_BEAN";

    /**
     * Properties of entity ChatLocalBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property SubType = new Property(5, String.class, "subType", false, "SUB_TYPE");
        public final static Property ImagePath = new Property(6, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property VoicePath = new Property(7, String.class, "voicePath", false, "VOICE_PATH");
        public final static Property VoiceDuration = new Property(8, String.class, "voiceDuration", false, "VOICE_DURATION");
        public final static Property GiftName = new Property(9, String.class, "giftName", false, "GIFT_NAME");
        public final static Property Versions = new Property(10, String.class, "versions", false, "VERSIONS");
        public final static Property Uid = new Property(11, String.class, "uid", false, "UID");
        public final static Property ToUid = new Property(12, String.class, "toUid", false, "TO_UID");
        public final static Property IsSelf = new Property(13, String.class, "isSelf", false, "IS_SELF");
        public final static Property MediaId = new Property(14, String.class, "mediaId", false, "MEDIA_ID");
        public final static Property ReqTime = new Property(15, String.class, "reqTime", false, "REQ_TIME");
        public final static Property ThumbImagePath = new Property(16, String.class, "thumbImagePath", false, "THUMB_IMAGE_PATH");
        public final static Property ImageWidth = new Property(17, String.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property ImageHeight = new Property(18, String.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property IsRead = new Property(19, String.class, "isRead", false, "IS_READ");
        public final static Property SendTime = new Property(20, String.class, "sendTime", false, "SEND_TIME");
        public final static Property SendStatus = new Property(21, String.class, "sendStatus", false, "SEND_STATUS");
        public final static Property GiftAnimate = new Property(22, String.class, "giftAnimate", false, "GIFT_ANIMATE");
        public final static Property CustomeKey1 = new Property(23, String.class, "customeKey1", false, "CUSTOME_KEY1");
        public final static Property CustomeKey2 = new Property(24, String.class, "customeKey2", false, "CUSTOME_KEY2");
        public final static Property CustomeKey3 = new Property(25, String.class, "customeKey3", false, "CUSTOME_KEY3");
        public final static Property CustomeKey4 = new Property(26, String.class, "customeKey4", false, "CUSTOME_KEY4");
        public final static Property CustomeKey5 = new Property(27, String.class, "customeKey5", false, "CUSTOME_KEY5");
        public final static Property CustomeKey6 = new Property(28, String.class, "customeKey6", false, "CUSTOME_KEY6");
    }


    public ChatLocalBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatLocalBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LOCAL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"TIME\" INTEGER," + // 2: time
                "\"TEXT\" TEXT," + // 3: text
                "\"TYPE\" TEXT," + // 4: type
                "\"SUB_TYPE\" TEXT," + // 5: subType
                "\"IMAGE_PATH\" TEXT," + // 6: imagePath
                "\"VOICE_PATH\" TEXT," + // 7: voicePath
                "\"VOICE_DURATION\" TEXT," + // 8: voiceDuration
                "\"GIFT_NAME\" TEXT," + // 9: giftName
                "\"VERSIONS\" TEXT," + // 10: versions
                "\"UID\" TEXT," + // 11: uid
                "\"TO_UID\" TEXT," + // 12: toUid
                "\"IS_SELF\" TEXT," + // 13: isSelf
                "\"MEDIA_ID\" TEXT," + // 14: mediaId
                "\"REQ_TIME\" TEXT," + // 15: reqTime
                "\"THUMB_IMAGE_PATH\" TEXT," + // 16: thumbImagePath
                "\"IMAGE_WIDTH\" TEXT," + // 17: imageWidth
                "\"IMAGE_HEIGHT\" TEXT," + // 18: imageHeight
                "\"IS_READ\" TEXT," + // 19: isRead
                "\"SEND_TIME\" TEXT," + // 20: sendTime
                "\"SEND_STATUS\" TEXT," + // 21: sendStatus
                "\"GIFT_ANIMATE\" TEXT," + // 22: giftAnimate
                "\"CUSTOME_KEY1\" TEXT," + // 23: customeKey1
                "\"CUSTOME_KEY2\" TEXT," + // 24: customeKey2
                "\"CUSTOME_KEY3\" TEXT," + // 25: customeKey3
                "\"CUSTOME_KEY4\" TEXT," + // 26: customeKey4
                "\"CUSTOME_KEY5\" TEXT," + // 27: customeKey5
                "\"CUSTOME_KEY6\" TEXT);"); // 28: customeKey6
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LOCAL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatLocalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(6, subType);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(7, imagePath);
        }
 
        String voicePath = entity.getVoicePath();
        if (voicePath != null) {
            stmt.bindString(8, voicePath);
        }
 
        String voiceDuration = entity.getVoiceDuration();
        if (voiceDuration != null) {
            stmt.bindString(9, voiceDuration);
        }
 
        String giftName = entity.getGiftName();
        if (giftName != null) {
            stmt.bindString(10, giftName);
        }
 
        String versions = entity.getVersions();
        if (versions != null) {
            stmt.bindString(11, versions);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(12, uid);
        }
 
        String toUid = entity.getToUid();
        if (toUid != null) {
            stmt.bindString(13, toUid);
        }
 
        String isSelf = entity.getIsSelf();
        if (isSelf != null) {
            stmt.bindString(14, isSelf);
        }
 
        String mediaId = entity.getMediaId();
        if (mediaId != null) {
            stmt.bindString(15, mediaId);
        }
 
        String reqTime = entity.getReqTime();
        if (reqTime != null) {
            stmt.bindString(16, reqTime);
        }
 
        String thumbImagePath = entity.getThumbImagePath();
        if (thumbImagePath != null) {
            stmt.bindString(17, thumbImagePath);
        }
 
        String imageWidth = entity.getImageWidth();
        if (imageWidth != null) {
            stmt.bindString(18, imageWidth);
        }
 
        String imageHeight = entity.getImageHeight();
        if (imageHeight != null) {
            stmt.bindString(19, imageHeight);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(20, isRead);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(21, sendTime);
        }
 
        String sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(22, sendStatus);
        }
 
        String giftAnimate = entity.getGiftAnimate();
        if (giftAnimate != null) {
            stmt.bindString(23, giftAnimate);
        }
 
        String customeKey1 = entity.getCustomeKey1();
        if (customeKey1 != null) {
            stmt.bindString(24, customeKey1);
        }
 
        String customeKey2 = entity.getCustomeKey2();
        if (customeKey2 != null) {
            stmt.bindString(25, customeKey2);
        }
 
        String customeKey3 = entity.getCustomeKey3();
        if (customeKey3 != null) {
            stmt.bindString(26, customeKey3);
        }
 
        String customeKey4 = entity.getCustomeKey4();
        if (customeKey4 != null) {
            stmt.bindString(27, customeKey4);
        }
 
        String customeKey5 = entity.getCustomeKey5();
        if (customeKey5 != null) {
            stmt.bindString(28, customeKey5);
        }
 
        String customeKey6 = entity.getCustomeKey6();
        if (customeKey6 != null) {
            stmt.bindString(29, customeKey6);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatLocalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(6, subType);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(7, imagePath);
        }
 
        String voicePath = entity.getVoicePath();
        if (voicePath != null) {
            stmt.bindString(8, voicePath);
        }
 
        String voiceDuration = entity.getVoiceDuration();
        if (voiceDuration != null) {
            stmt.bindString(9, voiceDuration);
        }
 
        String giftName = entity.getGiftName();
        if (giftName != null) {
            stmt.bindString(10, giftName);
        }
 
        String versions = entity.getVersions();
        if (versions != null) {
            stmt.bindString(11, versions);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(12, uid);
        }
 
        String toUid = entity.getToUid();
        if (toUid != null) {
            stmt.bindString(13, toUid);
        }
 
        String isSelf = entity.getIsSelf();
        if (isSelf != null) {
            stmt.bindString(14, isSelf);
        }
 
        String mediaId = entity.getMediaId();
        if (mediaId != null) {
            stmt.bindString(15, mediaId);
        }
 
        String reqTime = entity.getReqTime();
        if (reqTime != null) {
            stmt.bindString(16, reqTime);
        }
 
        String thumbImagePath = entity.getThumbImagePath();
        if (thumbImagePath != null) {
            stmt.bindString(17, thumbImagePath);
        }
 
        String imageWidth = entity.getImageWidth();
        if (imageWidth != null) {
            stmt.bindString(18, imageWidth);
        }
 
        String imageHeight = entity.getImageHeight();
        if (imageHeight != null) {
            stmt.bindString(19, imageHeight);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(20, isRead);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(21, sendTime);
        }
 
        String sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(22, sendStatus);
        }
 
        String giftAnimate = entity.getGiftAnimate();
        if (giftAnimate != null) {
            stmt.bindString(23, giftAnimate);
        }
 
        String customeKey1 = entity.getCustomeKey1();
        if (customeKey1 != null) {
            stmt.bindString(24, customeKey1);
        }
 
        String customeKey2 = entity.getCustomeKey2();
        if (customeKey2 != null) {
            stmt.bindString(25, customeKey2);
        }
 
        String customeKey3 = entity.getCustomeKey3();
        if (customeKey3 != null) {
            stmt.bindString(26, customeKey3);
        }
 
        String customeKey4 = entity.getCustomeKey4();
        if (customeKey4 != null) {
            stmt.bindString(27, customeKey4);
        }
 
        String customeKey5 = entity.getCustomeKey5();
        if (customeKey5 != null) {
            stmt.bindString(28, customeKey5);
        }
 
        String customeKey6 = entity.getCustomeKey6();
        if (customeKey6 != null) {
            stmt.bindString(29, customeKey6);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatLocalBean readEntity(Cursor cursor, int offset) {
        ChatLocalBean entity = new ChatLocalBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // voicePath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // voiceDuration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // giftName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // versions
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // uid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // toUid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isSelf
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // mediaId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // reqTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // thumbImagePath
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // imageWidth
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // imageHeight
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // isRead
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // sendTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // sendStatus
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // giftAnimate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // customeKey1
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // customeKey2
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // customeKey3
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // customeKey4
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // customeKey5
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // customeKey6
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatLocalBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSubType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVoicePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVoiceDuration(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGiftName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersions(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setToUid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsSelf(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMediaId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReqTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setThumbImagePath(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImageWidth(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImageHeight(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsRead(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSendTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSendStatus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGiftAnimate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCustomeKey1(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCustomeKey2(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCustomeKey3(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCustomeKey4(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCustomeKey5(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCustomeKey6(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatLocalBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatLocalBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatLocalBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
